// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// import "contracts/IBEP20.sol";
import  "./TokenContract.sol";

contract BusdWallet {
    TokenContract immutable public busdToken;
    mapping(address => uint256) internal balances;

    event Transfer(address indexed to, address indexed from, uint256 amount);

    constructor(address _busdAddress) {
        busdToken = TokenContract(_busdAddress);   
    }

    function approveToken(address spender, uint amount) external {
        require(spender != address(0), "Invalid Address");

        busdToken.approve(spender, amount);
    }

    function sendToken(address to, uint256 amount) external {
        require(to != address(0), "Invalid Address");

        busdToken.transfer(to, amount);
        
        emit Transfer(msg.sender, to, amount);
    }

    function receiveToken(address from, address to, uint256 amount) external {
        busdToken.transferFrom(from, to, amount);
        
        emit Transfer(from, to,  amount);
    }

    function balanceToken(address client) public view returns (uint256) {
        return busdToken.balanceOf(client);
    }

    function getBUSDBalanceContract() external view returns (uint256) {
        return busdToken.balanceOf(address(this));
    }
}